#include <iostream>

using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
        //this represents a null pointer value
    }
};

class Stack {
private:
    Node* top;

public:
    Stack() {
        top = nullptr;
    }

    bool isEmpty() {
        return top == nullptr;
    }

    void push(int value) {
        Node* newNode = new Node(value);
        if (isEmpty()) {
            top = newNode;
        } else {
            newNode->next = top;
            //changing the position of the top to the new node
            top = newNode;
        }
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow" << endl;
            return -1;
        } else {
            //pops the first node of the linked list
            int poppedValue = top->data;
            Node* temp = top;
            //changing the position of the top
            top = top->next;
            //delete the previous top value
            delete temp;
            return poppedValue;
        }
    }
    int peek() {
      if (isEmpty()) {
        std::cout << "Stack Underflow\n";
        return -1; 
      }
      return top->data;
    }
    void display()
    {
        Node* temp;
        if (top == NULL) {
            cout << "Stack Underflow\n";
            exit(1);
        }
        else {
            temp = top;
            while (temp != NULL) {
                cout << temp->data << " ";
                temp = temp->next;
            }
        }cout <<"\n";
    }
};
