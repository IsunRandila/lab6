#include <iostream>
#include <chrono>
using namespace std;

// Stack implementation using array
class ArrayStack {
  private:
    int arr[1000];
    int top;
  public:
    ArrayStack() {
      top = -1;
    }
    bool isEmpty() {
      return top == -1;
    }
    bool isFull() {
      return top == 999;
    }
    void push(int val) {
      if (isFull()) {
        cout << "Stack Overflow\n";
        return;
      }
      top++;
      arr[top] = val;
    }
    int pop() {
      if (isEmpty()) {
        cout << "Stack Underflow\n";
        return -1; // error value
      }
      int val = arr[top];
      top--;
      return val;
    }
    int peek() {
      if (isEmpty()) {
        cout << "Stack Underflow\n";
        return -1; // error value
      }
      return arr[top];
    } 
      void display(){
        if (isEmpty()) {
        std::cout << "Stack Underflow\n";
        }else{
            for(int i=0; i<= top; i++){
                cout << arr[i] << " ";
            }
        }
        cout <<"\n";
    }
    
};

// Stack implementation using linked list
class Node {
  public:
    int data;
    Node* next;
};

class ListStack {
  private:
    Node* top;
  public:
    ListStack() {
      top = nullptr;
    }
    bool isEmpty() {
      return top == nullptr;
    }
    void push(int val) {
      Node* newNode = new Node();
      newNode->data = val;
      newNode->next = top;
      top = newNode;
    }
    int pop() {
      if (isEmpty()) {
        std::cout << "Stack Underflow\n";
        return -1; // error value
      }
      Node* temp = top;
      int val = temp->data;
      top = top->next;
      delete temp;
      return val;
    }
    int peek() {
      if (isEmpty()) {
        cout << "Stack Underflow\n";
        return -1; // error value
      }
      return top->data;
    }
    void display()
    {
        Node* temp;
        if (top == NULL) {
           cout << "Stack Underflow\n";
            exit(1);
        }
        else {
            temp = top;
            while (temp != NULL) {
                cout << temp->data << " ";
                temp = temp->next;
            }
        }cout <<"\n";
    }
};

void testArrayStack() {
  ArrayStack s;
  auto start = std::chrono::high_resolution_clock::now();
  s.push(8);
  s.push(10);
  s.push(5);
  s.push(11);
  s.push(15);
  s.push(23);
  s.push(6);
  s.push(18);
  s.push(20);
  s.push(17);
  
  s.display();
  for (int i = 0; i < 5; i++) {
    s.pop();
  }
  s.display();
  s.push(4);
  s.push(30);
  s.push(3);
  s.push(1);
  s.display();
  auto end = std::chrono::high_resolution_clock::now();
  cout << "Time taken for push operations using array: " << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count() << " microseconds\n";
}

void testListStack() {
  ListStack s;
  auto start = std::chrono::high_resolution_clock::now();
   s.push(8);
  s.push(10);
  s.push(5);
  s.push(11);
  s.push(15);
  s.push(23);
  s.push(6);
  s.push(18);
  s.push(20);
  s.push(17);
  
  s.display();
  for (int i = 0; i < 5; i++) {
    s.pop();
  }
  s.display();
  s.push(4);
  s.push(30);
  s.push(3);
  s.push(1);
  s.display();
  auto end = std::chrono::high_resolution_clock::now();
  cout << "Time taken for push operations using array: " << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count() << " microseconds\n";}
  
  
  int main() {
 testArrayStack();
 testListStack();
 
  return 0;
}
